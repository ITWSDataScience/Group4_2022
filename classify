{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"m4Sw_flN0rx1","executionInfo":{"status":"ok","timestamp":1670471048837,"user_tz":300,"elapsed":1670,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}}},"outputs":[],"source":["# Data handling\n","import pandas as pd\n","import numpy as np"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"Ip1pLXzL-Oye","executionInfo":{"status":"ok","timestamp":1670471745460,"user_tz":300,"elapsed":2100,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}}},"outputs":[],"source":["import seaborn as sns\n","from numpy import loadtxt\n","from xgboost import XGBClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from sklearn.datasets import make_classification\n","from matplotlib import pyplot\n","import matplotlib.pyplot as plt\n","from sklearn.cluster import KMeans\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.ensemble import RandomForestClassifier \n","from sklearn.metrics import classification_report\n","from sklearn.decomposition import PCA\n","import plotly.express as px"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25486,"status":"ok","timestamp":1670471078647,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"},"user_tz":300},"id":"Dep3VAuEffC7","outputId":"2984b6eb-e9bd-492b-c516-da9448703735"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"pGD11pPo0r0x","executionInfo":{"status":"ok","timestamp":1670471079933,"user_tz":300,"elapsed":1294,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}}},"outputs":[],"source":["df = pd.read_csv('/content/drive/MyDrive/Data Science/data.csv')"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"EKVaoW7B0r6l","executionInfo":{"status":"ok","timestamp":1670471079934,"user_tz":300,"elapsed":10,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}}},"outputs":[],"source":["df = df.dropna()"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"OOWF-zhE2AvX","executionInfo":{"status":"ok","timestamp":1670471079934,"user_tz":300,"elapsed":8,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}}},"outputs":[],"source":["df = df.drop(columns=['Unnamed: 0','lon','lat'])"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":288,"status":"ok","timestamp":1670471080215,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"},"user_tz":300},"id":"yG3gmEgfblOO","outputId":"92beb8ca-0388-4646-a029-8625444758fd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 26.  ,  36.  ,  19.  , ..., 585.4 ,  55.7 ,   4.45])"]},"metadata":{},"execution_count":7}],"source":["# view the labels in the variable\n","df['OPER_CAP'].unique()"]},{"cell_type":"code","source":["# view how many different types of variables are there\n","len(df['OPER_CAP'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VbtLzhLCBbpv","executionInfo":{"status":"ok","timestamp":1670471080215,"user_tz":300,"elapsed":10,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"2e32f77d-e5b6-4487-b859-0d7ee99e9eb9"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2348"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["### **K-means**"],"metadata":{"id":"7c98aFccAn2i"}},{"cell_type":"code","execution_count":9,"metadata":{"id":"tRmWW4h3cGOH","colab":{"base_uri":"https://localhost:8080/","height":290},"executionInfo":{"status":"ok","timestamp":1670471131291,"user_tz":300,"elapsed":51083,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"63ba03c0-d7f5-4d43-e634-0edb13fa9b8b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["#Finding optimal number of clusters\n","from sklearn.cluster import KMeans\n","from matplotlib.ticker import MaxNLocator\n","\n","cost = []\n","\n","for i in range(2,20):\n","  kmeans = KMeans(n_clusters=i)\n","  kmeans.fit(df)\n","\n","  cost.append(kmeans.inertia_)\n","\n","plt.plot(range(2,20), cost, 'bx-')\n","plt.xlabel(\"Number of K\")\n","plt.ylabel(\"Squared error\")\n","plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))\n","plt.show()"]},{"cell_type":"code","source":["from sklearn.metrics import silhouette_score\t\n","# Prepare models\t\n","kmeans = KMeans(n_clusters=6).fit(df)\n","normalized_kmeans = KMeans(n_clusters=6).fit(df)\n","\n","# Print results\t\n","print('kmeans: {}'.format(silhouette_score(df, kmeans.labels_, metric='euclidean')))\n","print('Cosine kmeans: {}'.format(silhouette_score(df, normalized_kmeans.labels_, metric='cosine')))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"paN_hEn3B7Sa","executionInfo":{"status":"ok","timestamp":1670471302139,"user_tz":300,"elapsed":170852,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"11fc60ab-00a8-4a5d-f467-8af5c91e19fa"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["kmeans: 0.8836142944555483\n","Cosine kmeans: 0.2869580370093095\n"]}]},{"cell_type":"code","source":["normalized_kmeans = KMeans(n_clusters=7, random_state=42).fit(df)\n","df['cluster'] = normalized_kmeans.labels_"],"metadata":{"id":"EQA1qA0ZC2Wb","executionInfo":{"status":"ok","timestamp":1670471306259,"user_tz":300,"elapsed":4124,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["df.groupby('cluster')['cluster'].count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6Q8OXrSFwLM","executionInfo":{"status":"ok","timestamp":1670471685960,"user_tz":300,"elapsed":151,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"033aad72-2495-493b-aab2-4e654aac059f"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["cluster\n","0     2304\n","1    76131\n","2      138\n","3      923\n","4      413\n","5       29\n","6      753\n","Name: cluster, dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["def prepare_pca(n_components, data, kmeans_labels):\n","    names = ['x', 'y', 'z']\n","    matrix = PCA(n_components=n_components).fit_transform(data)\n","    df_matrix = pd.DataFrame(matrix)\n","    df_matrix.rename({i:names[i] for i in range(n_components)}, axis=1, inplace=True)\n","    df_matrix['labels'] = kmeans_labels   \n","    return df_matrix\n","\n","def prepare_tsne(n_components, data, kmeans_labels):\n","    names = ['x', 'y', 'z']\n","    matrix = TSNE(n_components=n_components).fit_transform(data)\n","    df_matrix = pd.DataFrame(matrix)\n","    df_matrix.rename({i:names[i] for i in range(n_components)}, axis=1, inplace=True)\n","    df_matrix['labels'] = kmeans_labels\n","    return df_matrix\n","\n","def plot_3d(df, name='labels'):\n","    iris = px.data.iris()\n","    fig = px.scatter_3d(df, x='x', y='y', z='z', color=name, opacity=0.5)\n","    fig.update_traces(marker=dict(size=3))\n","    fig.show()\n","\n","def plot_animation(df, label_column, name):\n","    def update(num):\n","        ax.view_init(200, num)\n","    N=360\n","    fig = plt.figure()\n","    ax = fig.add_subplot(111, projection='3d')\n","    ax.scatter(tsne_3d_df['x'], tsne_3d_df['y'], tsne_3d_df['z'], c=tsne_3d_df[label_column],\n","               s=6, depthshade=True, cmap='Paired')\n","    ax.set_zlim(-15, 25)\n","    ax.set_xlim(-20, 20)\n","    plt.tight_layout()\n","    ani = animation.FuncAnimation(fig, update, N, blit=False, interval=50)\n","    ani.save('{}.gif'.format(name), writer='imagemagick')\n","    plt.show()"],"metadata":{"id":"mFnaI4CC1MBn","executionInfo":{"status":"ok","timestamp":1670471690045,"user_tz":300,"elapsed":294,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["pca_df = prepare_pca(3, df, normalized_kmeans.labels_)\n","plot_3d(pca_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542,"output_embedded_package_id":"174sWQSCqY8i4Ddapkm6agfv1djTZv22a"},"id":"GJh1m0h01Opw","executionInfo":{"status":"ok","timestamp":1670471757134,"user_tz":300,"elapsed":9689,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"2bb99c36-9f94-4eba-d33e-12c498714c2b"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["### **Random Forest**"],"metadata":{"id":"peMEWXWXGXvP"}},{"cell_type":"code","source":["# split data into X and y\n","X = df.drop(columns=['OPER_CAP', 'cluster'])\n","y = df.drop(columns=['LONGITUDE', 'LATITUDE', 'COAL_USED', 'NGAS_USED', 'OIL_USED','OPER_CAP','speed'])"],"metadata":{"id":"hV5qumiVG6U6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# split data into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=1)"],"metadata":{"id":"BUhRSqaIHQva"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r2RaUSTJa2Ur","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1670375540580,"user_tz":300,"elapsed":1724,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"6c61d728-c5f0-4016-f3cd-83105a39197d"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-92-e67f9cb9e5d1>:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  model.fit(X_train, y_train)\n"]},{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       696\n","           1       1.00      1.00      1.00     22815\n","           2       0.92      0.52      0.67        44\n","           3       1.00      1.00      1.00       291\n","           4       0.92      0.95      0.94       129\n","           5       1.00      0.50      0.67         6\n","           6       0.93      1.00      0.96       227\n","\n","    accuracy                           1.00     24208\n","   macro avg       0.97      0.85      0.89     24208\n","weighted avg       1.00      1.00      1.00     24208\n","\n"]}],"source":["model = RandomForestClassifier(max_depth=7, random_state=42, n_estimators=10)\n","model.fit(X_train, y_train)\n","y_pred = model.predict(X_test)\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"code","source":["d = {\n","    'Feature': X_train.columns,\n","    'Importance': model.feature_importances_\n","}\n","dt_imp = pd.DataFrame(d)\n","dt_imp = dt_imp.sort_values('Importance', ascending=False)\n","dt_imp.index = range(len(dt_imp))\n","(dt_imp['Importance']!=0).sum(), (dt_imp['Importance']==0).sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fFblRdDyHtwv","executionInfo":{"status":"ok","timestamp":1670375543864,"user_tz":300,"elapsed":152,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"d1c3ff6b-41de-40fe-ae8f-60142a13d919"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6, 0)"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["dt_imp[dt_imp['Importance']==0].Feature"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PFxQPVL2HuG4","executionInfo":{"status":"ok","timestamp":1670375545607,"user_tz":300,"elapsed":139,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"08e25b78-b0f7-4f5a-f1b4-dd08f98ca2c0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Series([], Name: Feature, dtype: object)"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["plt.figure(figsize=(10,8))\n","sns.barplot(data=dt_imp[dt_imp['Importance']!=0][:10], y='Feature', x='Importance', palette='Set3')\n","plt.title('Feature Importance from Random Forest')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":530},"id":"QWQfRcFLH0n9","executionInfo":{"status":"ok","timestamp":1670375547232,"user_tz":300,"elapsed":402,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"72f9610e-a854-42ea-9b2d-4f438dbba790"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Feature Importance from Random Forest')"]},"metadata":{},"execution_count":95},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"U4pcVyzjJDoY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### **XGBoost**"],"metadata":{"id":"yUI3fEbiJEMC"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2RD0WUUy3797"},"outputs":[],"source":["# define the model\n","model_XGB = XGBClassifier(n_estimators=7, eta=0.05, subsample=0.5, colsample_bytree=0.5)\n","# define the datasets to evaluate each iteration\n","evalset = [(X_train, y_train), (X_test,y_test)]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":946,"status":"ok","timestamp":1670375865256,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"},"user_tz":300},"id":"tSoCLFC7CNfy","outputId":"20236ab0-725d-4f9a-eff6-8171b0388a53"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/preprocessing/_label.py:98: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.8/dist-packages/sklearn/preprocessing/_label.py:133: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(colsample_bytree=0.5, eta=0.05, n_estimators=7,\n","              objective='multi:softprob', subsample=0.5)"]},"metadata":{},"execution_count":103}],"source":["# fit the model\n","model_XGB.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zrkGofklW2GC"},"outputs":[],"source":["yhat = model_XGB.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qEAjhgrCYvxR"},"outputs":[],"source":["predictions = [round(value) for value in yhat]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":196,"status":"ok","timestamp":1670375870561,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"},"user_tz":300},"id":"LSalhZmVAQE-","outputId":"4c20fb8a-303a-4118-a79a-fc1080548960"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 99.84%\n"]}],"source":["# evaluate predictions\n","accuracy = accuracy_score(y_test, predictions)\n","print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"]},{"cell_type":"code","source":["print(classification_report(y_test, predictions))"],"metadata":{"id":"Ye2GPxFALoWC","executionInfo":{"status":"ok","timestamp":1670376242141,"user_tz":300,"elapsed":304,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"2f6acd97-e757-4210-e0e3-a5232ffc5bcd","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       696\n","           1       1.00      1.00      1.00     22815\n","           2       1.00      1.00      1.00        44\n","           3       1.00      0.99      0.99       291\n","           4       1.00      0.75      0.86       129\n","           5       1.00      0.50      0.67         6\n","           6       1.00      1.00      1.00       227\n","\n","    accuracy                           1.00     24208\n","   macro avg       1.00      0.89      0.93     24208\n","weighted avg       1.00      1.00      1.00     24208\n","\n"]}]},{"cell_type":"code","source":["d = {\n","    'Feature': X_train.columns,\n","    'Importance': model_XGB.feature_importances_\n","}\n","dt_imp = pd.DataFrame(d)\n","dt_imp = dt_imp.sort_values('Importance', ascending=False)\n","dt_imp.index = range(len(dt_imp))\n","(dt_imp['Importance']!=0).sum(), (dt_imp['Importance']==0).sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W-W-dvk3J7Wz","executionInfo":{"status":"ok","timestamp":1670375883895,"user_tz":300,"elapsed":146,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"2cbfbff2-767f-4632-8d7e-4fae6feca900"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6, 0)"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","source":["dt_imp[dt_imp['Importance']==0].Feature"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-nsFQhXxJ96V","executionInfo":{"status":"ok","timestamp":1670375885893,"user_tz":300,"elapsed":180,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"ce091969-ce18-41d2-8135-64d0c7c31461"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Series([], Name: Feature, dtype: object)"]},"metadata":{},"execution_count":108}]},{"cell_type":"code","source":["plt.figure(figsize=(10,8))\n","sns.barplot(data=dt_imp[dt_imp['Importance']!=0][:10], y='Feature', x='Importance', palette='Set3')\n","plt.title('Feature Importance from XGB')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":530},"id":"SqA7zX5YKAog","executionInfo":{"status":"ok","timestamp":1670375897437,"user_tz":300,"elapsed":343,"user":{"displayName":"Xin Ning","userId":"17679434445216668608"}},"outputId":"4eb1a573-f8a2-4020-e044-02278e4b07eb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Feature Importance from XGB')"]},"metadata":{},"execution_count":110},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}